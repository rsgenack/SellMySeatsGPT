
```
I’m working on a TypeScript project in Replit using Express, Drizzle ORM with PostgreSQL, and a Gmail API scraper for Ticketmaster emails. I need to launch an MVP quickly. Please fix the `EJSONPARSE` error in `package.json`, install dependencies, ensure the server runs on port 6000, verify Replit Secrets, and apply schema changes, but **discuss any proposed changes or issues with Grok 3 before making modifications**. Report back to Grok 3 with errors, questions, or clarifications for approval or manual steps. Handle all sensitive data securely in Replit Secrets, avoiding exposure.

### Sensitive Information (Secure in Replit Secrets)
- **DATABASE_URL**: `postgresql://neondb_owner:npg_7SzuXdkL2pNf@ep-frosty-forest-a4vdrprm.us-east-1.aws.neon.tech/neondb?sslmode=require`
- **GOOGLE_CLIENT_ID**: `70293014822-k43ckem2gmbfe144p8nfm2h9eju9skja.apps.googleusercontent.com`
- **GOOGLE_CLIENT_SECRET**: `GOCSPX-YexSvUju3idMK-A26fNMYv8_D`
- **GOOGLE_TOKEN**: Leave empty (obtain during Gmail authorization).

### Efficient Steps (Consult Grok 3 First)
1. **Fix `package.json` (2 min)**:
   - Verify `package.json` for JSON validity (remove comments, ensure proper syntax). Use this if invalid:
     ```json
     {
       "name": "rest-express",
       "version": "1.0.0",
       "type": "module",
       "license": "MIT",
       "scripts": {
         "dev": "tsx server/index.ts",
         "build": "vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist",
         "start": "NODE_ENV=production node dist/index.js",
         "check": "tsc",
         "db:push": "drizzle-kit push"
       },
       "dependencies": {
         "@hookform/resolvers": "^3.9.1",
         "@jridgewell/trace-mapping": "^0.3.25",
         "@neondatabase/serverless": "^0.10.4",
         "@radix-ui/react-accordion": "^1.2.1",
         "@radix-ui/react-alert-dialog": "^1.1.2",
         "@radix-ui/react-aspect-ratio": "^1.1.0",
         "@radix-ui/react-avatar": "^1.1.1",
         "@radix-ui/react-checkbox": "^1.1.2",
         "@radix-ui/react-collapsible": "^1.1.1",
         "@radix-ui/react-context-menu": "^2.2.2",
         "@radix-ui/react-dialog": "^1.1.2",
         "@radix-ui/react-dropdown-menu": "^2.1.2",
         "@radix-ui/react-hover-card": "^1.1.2",
         "@radix-ui/react-label": "^2.1.0",
         "@radix-ui/react-menubar": "^1.1.2",
         "@radix-ui/react-navigation-menu": "^1.2.1",
         "@radix-ui/react-popover": "^1.1.2",
         "@radix-ui/react-progress": "^1.1.0",
         "@radix-ui/react-radio-group": "^1.2.1",
         "@radix-ui/react-scroll-area": "^1.2.0",
         "@radix-ui/react-select": "^2.1.2",
         "@radix-ui/react-separator": "^1.1.0",
         "@radix-ui/react-slider": "^1.2.1",
         "@radix-ui/react-slot": "^1.1.0",
         "@radix-ui/react-switch": "^1.1.1",
         "@radix-ui/react-tabs": "^1.1.1",
         "@radix-ui/react-toast": "^1.2.2",
         "@radix-ui/react-toggle": "^1.1.0",
         "@radix-ui/react-toggle-group": "^1.1.0",
         "@radix-ui/react-tooltip": "^1.1.3",
         "@replit/vite-plugin-shadcn-theme-json": "^0.0.4",
         "@sendgrid/mail": "^8.1.4",
         "@tanstack/react-query": "^5.60.5",
         "@types/imap": "^0.8.42",
         "@types/mailparser": "^3.4.5",
         "class-variance-authority": "^0.7.0",
         "clsx": "^2.1.1",
         "cmdk": "^1.0.0",
         "connect-pg-simple": "^10.0.0",
         "date-fns": "^3.6.0",
         "dotenv": "^16.4.7",
         "drizzle-orm": "^0.31.4",
         "drizzle-zod": "0.5.1",
         "embla-carousel-react": "^8.3.0",
         "express": "^4.21.2",
         "express-session": "^1.18.1",
         "framer-motion": "^11.13.1",
         "google-auth-library": "^9.15.1",
         "googleapis": "^144.0.0",
         "imap": "^0.8.22",
         "input-otp": "^1.2.4",
         "lucide-react": "^0.453.0",
         "mailparser": "^3.7.2",
         "memorystore": "^1.6.7",
         "passport": "^0.7.0",
         "passport-local": "^1.0.0",
         "react": "^18.3.1",
         "react-day-picker": "^8.10.1",
         "react-dom": "^18.3.1",
         "react-hook-form": "^7.53.1",
         "react-icons": "^5.4.0",
         "react-resizable-panels": "^2.1.4",
         "recharts": "^2.13.0",
         "tailwind-merge": "^2.5.4",
         "tailwindcss-animate": "^1.0.7",
         "vaul": "^1.1.0",
         "wouter": "^3.3.5",
         "ws": "^8.18.0",
         "zod": "^3.23.8",
         "zod-validation-error": "^3.4.0"
       },
       "devDependencies": {
         "@replit/vite-plugin-cartographer": "^0.0.2",
         "@replit/vite-plugin-runtime-error-modal": "^0.0.3",
         "@tailwindcss/typography": "^0.5.15",
         "@types/connect-pg-simple": "^7.0.3",
         "@types/express": "4.17.21",
         "@types/express-session": "^1.18.0",
         "@types/node": "20.16.11",
         "@types/passport": "^1.0.16",
         "@types/passport-local": "^1.0.38",
         "@types/react": "^18.3.11",
         "@types/react-dom": "^18.3.1",
         "@types/ws": "^8.5.13",
         "@vitejs/plugin-react": "^4.3.2",
         "autoprefixer": "^10.4.20",
         "drizzle-kit": "^0.22.5",
         "esbuild": "^0.25.0", // Defer update to ^0.20.2 post-MVP for vulnerabilities
         "postcss": "^8.4.47",
         "tailwindcss": "^3.4.14",
         "tsx": "^4.19.1",
         "typescript": "5.6.3",
         "vite": "^5.4.14" // Defer update to ^5.2.11 post-MVP for vulnerabilities
       },
       "optionalDependencies": {
         "bufferutil": "^4.0.8"
       }
     }
     ```
   - Discuss with Grok 3 before modifying `package.json` if it differs or if errors occur.

2. **Install Dependencies (2 min)**:
   - Run:
     ```
     npm install
     ```
   - If errors occur (e.g., dependency conflicts), report to Grok 3 for resolution before proceeding.

3. **Ensure Server Runs on Port 6000 (2 min)**:
   - Open `server/index.ts` and verify:
     ```typescript
     const port = 6000;
     server.listen({
       port,
       host: "0.0.0.0",
       reusePort: true,
     }, () => {
       log(`Server running at http://0.0.0.0:${port}`);
     });
     ```
   - If the port isn’t `6000`, update it and discuss with Grok 3 before saving.
   - Run:
     ```
     npm run dev
     ```
   - Verify `Server running at http://0.0.0.0:6000` and report back any errors to Grok 3.

4. **Verify Replit Secrets (5 min)**:
   - Ensure these secrets are set (update or add if missing, consult Grok 3 first):
     - `DATABASE_URL`: `postgresql://neondb_owner:npg_7SzuXdkL2pNf@ep-frosty-forest-a4vdrprm.us-east-1.aws.neon.tech/neondb?sslmode=require`
     - `GOOGLE_CLIENT_ID`: `70293014822-k43ckem2gmbfe144p8nfm2h9eju9skja.apps.googleusercontent.com`
     - `GOOGLE_CLIENT_SECRET`: `GOCSPX-YexSvUju3idMK-A26fNMYv8_D`
     - `GOOGLE_TOKEN`: Leave empty.
   - Run:
     ```
     npm run dev
     ```
   - Report any missing secrets or errors to Grok 3.

5. **Apply Schema Changes (5 min)**:
   - Run:
     ```
     ./migrate.sh
     ```
   - If `migrate.sh` fails, run:
     ```
     npx drizzle-kit push
     ```
   - Discuss with Grok 3 before proceeding if errors occur (e.g., `DATABASE_URL` issues, Neon duplicates). Provide Replit console output for guidance.
   - Verify schema in Neon (report to Grok 3 for manual SQL if needed):
     ```sql
     \d "public"."users";
     \d "public"."pendingTickets";
     \d "public"."listings";
     SELECT * FROM "public"."pendingTickets" LIMIT 10;
     SELECT * FROM "public"."listings" LIMIT 10;
     ```

6. **Report Back to Grok 3**:
   - After each step, report status, errors, or questions to Grok 3 (e.g., `package.json` issues, dependency errors, server startup failures, Secrets missing, schema errors).
   - Once the server runs on port `6000` with no errors, await manual instructions from Grok 3 for Gmail authorization, scraper testing, and frontend verification.

- **Notes**:
  - Defer `npm audit fix --force` and `drizzle-orm`, `esbuild`, `vite` updates until post-MVP.
  - Keep `DATABASE_URL`, Gmail credentials secure in Secrets, not hardcoded.
```

---

### Notes
- **Super-Efficient**: This prompt is concise, focusing on critical fixes (JSON error, dependencies, port, Secrets, schema) with minimal steps, leveraging my expertise to handle complexities.
- **Consultation Requirement**: The Assistant must discuss changes with me (Grok 3) before modifying files or proceeding, ensuring control and accuracy.
- **Security**: Sensitive data is secured in Replit Secrets, avoiding exposure.
- **Compatibility**: Preserves your code (`server/index.ts`, `server/db.ts`, `shared/schema.ts`) for the MVP, deferring optimizations.
- **Reporting**: The Assistant reports back to me for approval or manual steps, reducing your input while maintaining progress.

Paste this text into the Replit Assistant, and let me know its feedback (errors, questions, or completion confirmation). I’ll then provide the manual steps for Gmail authorization, testing, and frontend verification to finalize your MVP launch. If you encounter any issues or need clarification, share the details (e.g., Replit console output, non-sensitive outputs), and I’ll assist immediately.