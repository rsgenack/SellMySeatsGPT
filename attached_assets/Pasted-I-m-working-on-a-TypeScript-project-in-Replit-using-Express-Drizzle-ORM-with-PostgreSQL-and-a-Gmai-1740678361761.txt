I’m working on a TypeScript project in Replit using Express, Drizzle ORM with PostgreSQL, and a Gmail API scraper to process Ticketmaster ticket transfer emails. I need you to resolve vulnerabilities in my dependencies, update the project, apply database schema changes, authorize Gmail, test the scraper, and verify frontend functionality. Use the following instructions, code, and details to proceed, and report back any questions, errors, or clarifications to me for final guidance. Handle all sensitive data (e.g., database URLs, API keys) securely within Replit’s Secrets, and do not expose it outside this project.

### Current Issue
I ran `npm install` and found 10 vulnerabilities (7 moderate, 3 high) in my dependencies, including:
- High severity: `semver` (<5.7.2) in `imap` (via `utf7`), causing Regular Expression Denial of Service (ReDoS) — https://github.com/advisories/GHSA-c2qf-rxjj-qqgw. Fix by updating `imap` to `>=0.8.17` (breaking change).
- Moderate severity: `utf7` (<1.0.2) in `imap`, also causing ReDoS. Fix by updating `imap` to `>=0.8.17`.
Additionally, I need to ensure the Google authentication URL populates, the Gmail scraper processes Ticketmaster emails, and tickets display in the frontend. The project uses `server/gmail-scraper.ts`, `server/routes.ts`, `server/index.ts`, and `shared/schema.ts` with Neon Serverless PostgreSQL.

### Sensitive Information (Handle Securely in Replit)
- **DATABASE_URL**: `postgres://[user]:[password]@[host]/[database]` (replace with your Neon Serverless connection string, stored in Replit Secrets under `DATABASE_URL`).
- **GOOGLE_CLIENT_ID**: `70293014822-22osm1pr707l0ebe5mbqe7oh4et4cjfq.apps.googleusercontent.com`
- **GOOGLE_CLIENT_SECRET**: `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`
- **GOOGLE_TOKEN**: Leave empty for now (you’ll obtain this during Gmail authorization).

### Steps to Resolve Vulnerabilities and Test the Project
Follow these steps in Replit and Neon, reporting back any errors or questions:

#### Step 1: Fix Vulnerabilities in Dependencies (5–15 Minutes)
- Run `npm audit` to list vulnerabilities and their fixes:

npm audit
- Update `package.json` to fix the `semver` and `utf7` vulnerabilities by updating `imap` to `>=0.8.17` (or the latest version, e.g., `^0.8.22`):
```json
"dependencies": {
  "imap": "^0.8.22",
  // ... other dependencies (e.g., "google-auth-library", "googleapis", "drizzle-orm", "@neondatabase/serverless", "express", "passport", "passport-local", "@tanstack/react-query", "wouter") ...
}

Save package.json in Replit.
Run:
npm install

Verify fixes with:
npm audit

If vulnerabilities remain or breaking changes occur (e.g., imap API changes), run:
npm audit fix --force

Test project functionality after updates (see Step 5) to ensure no breaking changes affect server/gmail-scraper.ts. If errors occur, revert package.json and package-lock.json (using Replit history or Git), then manually update imap to 0.8.17 and test again. Report any errors back to me.

Step 2: Ensure Dependencies Are Installed (2–5 Minutes)
Verify all dependencies are installed:
npm list
If missing, install:
npm install google-auth-library googleapis drizzle-orm @neondatabase/serverless express passport passport-local @tanstack/react-query wouter


Step 3: Update Replit Secrets (5 Minutes)
Ensure the following are set in Replit Secrets (click “Secrets” tab):
DATABASE_URL: Your Neon Serverless PostgreSQL connection string (e.g., postgres://user:password@host/database from Neon Dashboard).
GOOGLE_CLIENT_ID: 70293014822-22osm1pr707l0ebe5mbqe7oh4et4cjfq.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET: 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
GOOGLE_TOKEN: Leave empty (will be set after authorization).

Step 4: Apply Schema Changes with npx drizzle-kit push (5–10 Minutes)
Ensure DATABASE_URL is set in Secrets.
In the Replit shell, run:
npx drizzle-kit push

When prompted:
For username unique constraint (in users): Type 1 and press Enter (select “No, add the constraint without truncating the table”).
For uniqueEmail unique constraint (in users): Type 1 and press Enter.
For pendingTickets (renaming pending_tickets to pendingTickets): Type 4 and press Enter.
Accept defaults for other prompts or abort (type n) and report back if unsure.
If errors occur (e.g., DATABASE_URL not defined or unique constraint violations), verify Secrets and resolve duplicates in Neon:
For username
SELECT username, COUNT(*) AS count 
FROM "public"."users" 
GROUP BY username 
HAVING COUNT(*) > 1;
Update or delete:
UPDATE "public"."users" SET username = 'username_updated' WHERE id = X;
or
DELETE FROM "public"."users" WHERE id = Y;
For uniqueEmail:
SELECT COALESCE(unique_email, email) AS uniqueEmail, COUNT(*) AS count 
FROM "public"."users" 
GROUP BY COALESCE(unique_email, email) 
HAVING COUNT(*) > 1;
Update or delete:
UPDATE "public"."users" SET uniqueEmail = 'uniqueemail_updated@seatxfer.com' WHERE id = X;
Re-run npx drizzle-kit push after resolving duplicates.

Step 5: Start the Server (2 Minutes)
Press “Run” in Replit or run:
npm run dev

Verify the Replit console shows:
Server running at http://0.0.0.0:5000
Please authorize the Gmail API by visiting this URL: [authUrl] (from server/gmail-scraper.ts).

Step 6: Authorize Gmail (5–10 Minutes)
If the authUrl appears, copy it (e.g., https://accounts.google.com/o/oauth2/auth?...).
Open the URL in your browser, log in with "forwarding@sellmyseats.com," grant permissions, and copy the authorization code (e.g., 4/0AX...).
If the authUrl doesn’t appear, fetch it via:
curl http://0.0.0.0:5000/api/gmail/auth-url

This returns { "authUrl": "[authUrl]", "message": "Please visit this URL to authenticate Gmail access" }.
Complete the OAuth flow by running
curl http://0.0.0.0:5000/api/gmail/callback?code=[your-code]
or visit http://0.0.0.0:5000/api/gmail/callback?code=[your-code].
Verify the console shows: Gmail API authenticated successfully. Token stored in GOOGLE_TOKEN., and check Replit Secrets for GOOGLE_TOKEN (JSON string).

Step 7: Test the Gmail Scraper (5–10 Minutes)
Send a test Ticketmaster email from customer_support@email.ticketmaster.com to john.randomhash@seatxfer.com with HTML:
<div><h1>Your Ticket Transfer From - Is Ready To Be Accepted!</h1><p>Zach Bryan</p><p>Sun, Jul 20 @ 7:00 PM</p><p>MetLife Stadium, East Rutherford, NJ</p><p>Section 114A, Row 23, Seat 1</p></div>

Wait 5 minutes (or adjust server/gmail-scraper.ts to async startMonitoring(intervalMs = 120000) for 2 minutes).
Check the Replit console for logs:
Starting to scrape tickets from Gmail...
Found 1 unread Ticketmaster messages
Processing message ID: [ID]
Successfully created pending ticket for user: [username]
Verify in Neon:
SELECT * FROM "public"."pendingTickets" LIMIT 10;

Ensure ticket data (e.g., eventName, eventDate, recipientEmail) is stored, linking to john.randomhash@seatxfer.com.
Step 8: Test Frontend Display (5 Minutes)
Ensure client/src/ has Tickets.tsx, Login.tsx, and main.tsx configured with wouter and @tanstack/react-query.
Log in as john.randomhash@seatxfer.com (via /login, local or Google auth).
Navigate to /tickets (e.g., https://your-repl-name.owner.repl.co/tickets).
Verify the ticket appears in “Pending Tickets,” showing eventName, eventDate, eventTime, venue, section, row, seat.
Confirm the ticket (POST /api/pending-tickets/:id/confirm), and check it moves to “My Listings” in the frontend and Neon:
SELECT * FROM "public"."listings" LIMIT 10;
Step 9: Troubleshoot If Issues Arise (As Needed)
No Auth URL:
Verify GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET in Replit Secrets.
Ensure npm install google-auth-library googleapis.
Check redirectUri in server/gmail-scraper.ts matches Google OAuth (update in Google Cloud Console if needed, e.g., https://your-repl-name.owner.repl.co/api/gmail/callback).
Fetch /api/gmail/auth-url if needed.
Gmail Not Processing:
Ensure GOOGLE_TOKEN is set after authorization.
Test with a valid Ticketmaster email, check logs for errors, and verify DATABASE_URL.
Database Errors:
Confirm DATABASE_URL in Replit Secrets and re-run npx drizzle-kit push.
Check Neon for table existence (pendingTickets, listings, etc.).
Frontend Issues:
Verify wouter, @tanstack/react-query, and API endpoints (/api/tickets, /api/pending-tickets) are working, and check Replit logs for frontend errors.
Report Back
Execute all steps above, monitoring for errors or issues.
If you encounter any errors (e.g., during npm audit, npx drizzle-kit push, Gmail authorization, or testing), report the exact error message, step, and relevant non-sensitive details (e.g., console output, API responses) back to me for guidance.
If you need clarification (e.g., about dependency updates, Neon queries, or frontend setup), ask specific, non-sensitive questions (e.g., “Which redirectUri should I use for Google OAuth?” or “How do I fix a specific TypeScript error?”).
Once all steps are complete and the project runs successfully (vulnerabilities fixed, schema applied, Gmail scraper working, tickets displayed), confirm the outcome (e.g., vulnerabilities resolved, tickets processed, frontend verified) back to me for final verification.